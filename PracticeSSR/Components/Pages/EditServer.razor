@page "/servers/{id:int}"

@inject NavigationManager Navigation

<PageTitle>Edit Server</PageTitle>

<h2 class="page-header">Edit Server</h2>

@if (server is not null)
{

    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
        <DataAnnotationsValidator />

        <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>

        <div class="server-card">
            <h4 class="card-title">Server Details</h4>
            <div class="server-name label flow">
                <p>Name</p>
                <InputText @bind-Value="server.Name"></InputText>
                <ValidationMessage For="() => server.Name"></ValidationMessage>
            </div>
            <div class="city-name label flow">
                <p>City</p>
                <InputText @bind-Value="server.City"></InputText>
                <ValidationMessage For="() => server.City"></ValidationMessage>
            </div>
            <div class="server-status">
                <p class="online-label">Online</p>
                <InputCheckbox @bind-Value="server.IsOnline"></InputCheckbox>
            </div>
            <div class="form-buttons">
                <button class="button-submit" type="submit">Update</button>
                <a class="button-link" href="/servers">Back</a>
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Server? server { get; set; }

    private List<City> cities = CitiesRepository.GetCities();

    protected override void OnParametersSet()
    {
        if (Id > 0)
        {
            server ??= ServersRepository.GetServerById(Id)
                    ?? throw new ArgumentNullException(nameof(server));
        }
        else
            throw new ArgumentOutOfRangeException(nameof(Id));
    }

    private void Submit()
    {
        if (server is not null)
            ServersRepository.UpdateServer(server.ServerId, server);

        Navigation.NavigateTo("/servers");
    }
}

